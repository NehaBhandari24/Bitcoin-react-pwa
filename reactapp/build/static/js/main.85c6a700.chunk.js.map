{"version":3,"sources":["Today/Today.js","History/History.js","notifications/firebase.js","App.js","serviceWorker.js","index.js"],"names":["Today","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","btcprice","ltcprice","ethprice","token","_this2","axios","get","then","response","setState","data","BTC","USD","localStorage","setItem","ETH","LTC","catch","error","console","log","navigator","onLine","getItem","priceSubscription","setInterval","_ref","sendPricePusher","_this3","prices","_this4","post","clearInterval","react_default","a","createElement","className","Component","History","todayprice","yesterdayprice","twodaysprice","threedaysprice","fourdaysprice","getBTCPrices","bind","assertThisInitialized","getETHPrices","getLTCPrices","JSON","parse","date","t","moment","unix","all","spread","eth","btc","ltc","f","format","stringify","subtract","_this5","_this6","getTodayPrice","getYesterdayPrice","getTwoDaysPrice","getThreeDaysPrice","getFourDaysPrice","askForPermissionToReceiveNotifications","asyncToGenerator","regenerator_default","mark","_callee","messaging","wrap","_context","prev","next","firebase","requestPermission","getToken","sent","abrupt","t0","stop","apply","arguments","App","resp","onClick","src_Today_Today","src_History_History","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","initializeApp","messagingSenderId","URL","process","href","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.85c6a700.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport './Today.css'\r\nimport axios from 'axios'\r\nclass Today extends Component {\r\n        // Adds a class constructor that assigns the initial state values:\r\n\t\t\t\t// Adds a class constructor that assigns the initial state values:\r\n\t\t\t  constructor(props) {\r\n\t\t\t    super(props);\r\n\t\t\t    this.state = {\r\n\t\t\t      btcprice: \"\",\r\n\t\t\t      ltcprice: \"\",\r\n\t\t\t      ethprice: \"\",\r\n\t\t\t      token: props.token\r\n\t\t\t    };\r\n\t\t\t  }\r\n\r\n\r\n\t\t\t\tcomponentDidMount () {\r\n\t\t\t\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n\t        .then(response => {\r\n\t            this.setState({ btcprice: response.data.BTC.USD });\r\n\t            localStorage.setItem('BTC', response.data.BTC.USD);\r\n\r\n\t            this.setState({ ethprice: response.data.ETH.USD });\r\n\t            localStorage.setItem('ETH', response.data.ETH.USD);\r\n\r\n\t            this.setState({ ltcprice: response.data.LTC.USD });\r\n\t            localStorage.setItem('LTC', response.data.LTC.USD);\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.log(error)\r\n\t        })\r\n\r\n\t\t\t\t\tif (!navigator.onLine) {\r\n\t\t\t        this.setState({ btcprice: localStorage.getItem('BTC') });\r\n\t\t\t        this.setState({ ethprice: localStorage.getItem('ETH') });\r\n\t\t\t        this.setState({ ltcprice: localStorage.getItem('LTC') });\r\n    \t\t\t}\r\n\r\n\t\t\t\t\t\tthis.priceSubscription = setInterval(() => {\r\n\t\t\t\t\t\t\taxios\r\n\t\t\t\t\t\t\t\t.get(\r\n\t\t\t\t\t\t\t\t\t\"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD\"\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t.then(({ data }) => {\r\n\t\t\t\t\t\t\t\t\tthis.sendPricePusher(data);\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, 20000);\r\n\r\n \t\t\t}\r\n        // This is called when an instance of a component is being created and inserted into the DOM.\r\n        componentWillMount () {\r\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n                .then(response => {\r\n                    // We set the latest prices in the state to the prices gotten from Cryptocurrency.\r\n                    this.setState({ btcprice: response.data.BTC.USD });\r\n                    this.setState({ ethprice: response.data.ETH.USD });\r\n                    this.setState({ ltcprice: response.data.LTC.USD });\r\n                })\r\n                // Catch any error here\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n\r\n\t\t\t\tsendPricePusher(prices) {\r\n\t\t\t\t\taxios\r\n\t\t\t\t\t\t.post(\"https://node-pwa-app.firebaseapp.com/prices/new\", {\r\n\t\t\t\t\t\t\tprices: prices,\r\n\t\t\t\t\t\t\ttoken: this.state.token\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\tbtcprice: prices.BTC.USD,\r\n\t\t\t\t\t\t\t\tethprice: prices.ETH.USD,\r\n\t\t\t\t\t\t\t\tltcprice: prices.LTC.USD\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcomponentWillUnmount() {\r\n\t\t\t\t\tclearInterval(this.priceSubscription);\r\n\t\t\t\t}\r\n        // The render method contains the JSX code which will be compiled to HTML.\r\n        render() {\r\n            return (\r\n                <div className=\"today--section container\">\r\n                    <h2>Current Price</h2>\r\n                    <div className=\"columns today--section__box\">\r\n                        <div className=\"column btc--section\">\r\n                            <h5>${this.state.btcprice}</h5>\r\n                            <p>1 BTC</p>\r\n                        </div>\r\n                        <div className=\"column eth--section\">\r\n                            <h5>${this.state.ethprice}</h5>\r\n                            <p>1 ETH</p>\r\n                        </div>\r\n                        <div className=\"column ltc--section\">\r\n                            <h5>${this.state.ltcprice}</h5>\r\n                            <p>1 LTC</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    export default Today;\r\n","import React, { Component } from 'react';\nimport './History.css'\nimport axios from 'axios'\nimport moment from 'moment'\n\nclass History extends Component {\n      constructor () {\n        super();\n        this.state = {\n            todayprice: {},\n            yesterdayprice: {},\n            twodaysprice: {},\n            threedaysprice: {},\n            fourdaysprice: {}\n        }\n        this.getBTCPrices = this.getBTCPrices.bind(this);\n        this.getETHPrices = this.getETHPrices.bind(this);\n        this.getLTCPrices = this.getLTCPrices.bind(this);\n      }\n\n\n      componentDidMount () {\n        if (!navigator.onLine) {\n            this.setState({ todayprice: JSON.parse(localStorage.getItem('todayprice')) });\n            this.setState({ yesterdayprice: JSON.parse(localStorage.getItem('yesterdayprice')) });\n            this.setState({ twodaysprice: JSON.parse(localStorage.getItem('twodaysprice')) });\n            this.setState({ threedaysprice: JSON.parse(localStorage.getItem('threedaysprice')) });\n            this.setState({ fourdaysprice: JSON.parse(localStorage.getItem('fourdaysprice')) });\n        }\n      }\n      // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\n      getETHPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=' + date);\n      }\n      // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n      getBTCPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=' + date);\n      }\n      // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\n      getLTCPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=' + date);\n      }\n\n      // This function gets the prices for the current date.\n    getTodayPrice () {\n        // Get today's date in timestamp\n        let t = moment().unix()\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of todayprice to the content of the object f\n                localStorage.setItem('todayprice', JSON.stringify(f));\n                this.setState({ todayprice: f });\n            }));\n    }\n    // This function gets the prices for the yesterday.\n    getYesterdayPrice () {\n        // Get yesterday's date in timestamp\n        let t = moment().subtract(1, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of yesterdayprice to the content of the object f\n                 localStorage.setItem('yesterdayprice', JSON.stringify(f));\n                this.setState({ yesterdayprice: f });\n            }));\n    }\n    // This function gets the prices for the two days ago.\n    getTwoDaysPrice () {\n        // Get the date for two days ago in timestamp\n        let t = moment().subtract(2, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of twodaysprice to the content of the object f\n                localStorage.setItem('twodaysprice', JSON.stringify(f));\n                this.setState({ twodaysprice: f });\n            }));\n    }\n    // This function gets the prices for the three days ago.\n    getThreeDaysPrice () {\n        // Get the date for three days ago in timestamp\n        let t = moment().subtract(3, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of threedaysprice to the content of the object f\n                localStorage.setItem('threedaysprice', JSON.stringify(f));\n                this.setState({ threedaysprice: f });\n            }));\n    }\n    // This function gets the prices for the four days ago.\n    getFourDaysPrice () {\n        // Get the date for four days ago in timestamp\n        let t = moment().subtract(4, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of fourdaysprice to the content of the object f\n                localStorage.setItem('fourdaysprice', JSON.stringify(f));\n                this.setState({ fourdaysprice: f });\n            }));\n    }\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount () {\n        this.getTodayPrice();\n        this.getYesterdayPrice();\n        this.getTwoDaysPrice();\n        this.getThreeDaysPrice();\n        this.getFourDaysPrice();\n    }\n    render() {\n                return (\n                    <div className=\"history--section container\">\n                        <h2>History (Past 5 days)</h2>\n                        <div className=\"history--section__box\">\n                            <div className=\"history--section__box__inner\">\n                                <h4>{this.state.todayprice.date}</h4>\n                                <div className=\"columns\">\n                                    <div className=\"column\">\n                                        <p>1 BTC = ${this.state.todayprice.btc}</p>\n                                    </div>\n                                    <div className=\"column\">\n                                        <p>1 ETH = ${this.state.todayprice.eth}</p>\n                                    </div>\n                                    <div className=\"column\">\n                                        <p>1 LTC = ${this.state.todayprice.ltc}</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"history--section__box__inner\">\n                                <h4>{this.state.yesterdayprice.date}</h4>\n                                <div className=\"columns\">\n                                    <div className=\"column\">\n                                        <p>1 BTC = ${this.state.yesterdayprice.btc}</p>\n                                    </div>\n                                    <div className=\"column\">\n                                        <p>1 ETH = ${this.state.yesterdayprice.eth}</p>\n                                    </div>\n                                    <div className=\"column\">\n                                        <p>1 LTC = ${this.state.yesterdayprice.ltc}</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"history--section__box__inner\">\n                                <h4>{this.state.twodaysprice.date}</h4>\n                                <div className=\"columns\">\n                                    <div className=\"column\">\n                                        <p>1 BTC = ${this.state.twodaysprice.btc}</p>\n                                    </div>\n                                    <div className=\"column\">\n                                        <p>1 ETH = ${this.state.twodaysprice.eth}</p>\n                                    </div>\n                                    <div className=\"column\">\n                                        <p>1 LTC = ${this.state.twodaysprice.ltc}</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"history--section__box__inner\">\n                                <h4>{this.state.threedaysprice.date}</h4>\n                                <div className=\"columns\">\n                                    <div className=\"column\">\n                                        <p>1 BTC = ${this.state.threedaysprice.btc}</p>\n                                    </div>\n                                    <div className=\"column\">\n                                        <p>1 ETH = ${this.state.threedaysprice.eth}</p>\n                                    </div>\n                                    <div className=\"column\">\n                                        <p>1 LTC = ${this.state.threedaysprice.ltc}</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"history--section__box__inner\">\n                                <h4>{this.state.fourdaysprice.date}</h4>\n                                <div className=\"columns\">\n                                    <div className=\"column\">\n                                        <p>1 BTC = ${this.state.fourdaysprice.btc}</p>\n                                    </div>\n                                    <div className=\"column\">\n                                        <p>1 ETH = ${this.state.fourdaysprice.eth}</p>\n                                    </div>\n                                    <div className=\"column\">\n                                        <p>1 LTC = ${this.state.fourdaysprice.ltc}</p>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                )\n            }\n        }\n\nexport default History;\n","import firebase from \"firebase\";\r\nexport const initializeFirebase = () => {\r\n  firebase.initializeApp({\r\n    messagingSenderId: \"848447013519\"\r\n  });\r\n};\r\n\r\nexport const askForPermissionToReceiveNotifications = async () => {\r\n  try {\r\n    const messaging = firebase.messaging();\r\n    await messaging.requestPermission();\r\n    const token = await messaging.getToken();\r\n    console.log(\"Token:\", token);\r\n\r\n    return token;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","// Import React and Component\nimport React, { Component } from \"react\";\n// Import CSS from App.css\nimport \"./App.css\";\nimport Today from './Today/Today'\nimport History from './History/History'\nimport { askForPermissionToReceiveNotifications } from \"./notifications/firebase\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null\n    };\n  }\n\n  getToken = () => {\n    askForPermissionToReceiveNotifications().then(resp => {\n      this.setState({ token: resp });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"main-container\">\n        <div className=\"topheader\">\n          <header className=\"container\">\n            <nav className=\"navbar\">\n              <div className=\"navbar-brand\">\n                <span className=\"navbar-item\">\n                  Blockchain Currency Latest Prices\n                </span>\n              </div>\n              <div className=\"navbar-end\">\n                <nav className=\"navbar-item\" onClick={this.getToken}>\n                  Want to receive Push Notifications ?\n                </nav>\n              </div>\n            </nav>\n          </header>\n        </div>\n        <section className=\"results--section\">\n          <div className=\"container\">\n            <h1>\n              Get to know about the latest block chain currency prices\n              <br /> BTC, ETH and LTC\n            </h1>\n          </div>\n          <div className=\"results--section__inner\">\n                <Today />\n                <History />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n\r\n      console.log(\"registered\");\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n       console.log('Hooray. Registration successful, scope is:', registration.scope);\r\n      registration.unregister();\r\n    })\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { initializeFirebase } from \"./notifications/firebase.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\ninitializeFirebase();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}