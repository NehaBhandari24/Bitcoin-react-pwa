{"version":3,"sources":["Today/CryptoPrice.js","Today/Today.js","History/SectionBox.js","History/History.js","notifications/firebase.js","App.js","serviceWorker.js","index.js"],"names":["CryptoPrice","_ref","currency","price","react_default","a","createElement","className","concat","toUpperCase","Today","state","btcprice","ltcprice","ethprice","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","_this","restoreStateFromLocalStorage","parse","getItem","setState","prices","_this2","this","axios","post","token","then","BTC","USD","ETH","LTC","catch","error","console","log","_this3","navigator","onLine","get","_ref$data","data","cryptoSubscription","setInterval","_ref2","sendPricePusher","clearInterval","_this$state","CryptoPrice_CryptoPrice","Component","SectionBox","date","btc","eth","ltc","defaultProps","History","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getPriceForDay","daysCount","arguments","length","undefined","key","time","moment","subtract","unix","all","getETHPrices","getBTCPrices","getLTCPrices","spread","f","format","defineProperty","getCurrencyPrice","todayprice","yesterdayprice","twodaysprice","threedaysprice","fourdaysprice","days","day","SectionBox_SectionBox","askForPermissionToReceiveNotifications","asyncToGenerator","regenerator_default","mark","_callee","messaging","wrap","_context","prev","next","firebase","requestPermission","getToken","sent","abrupt","t0","stop","apply","App","resp","onClick","src_Today_Today","src_History_History","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App_0","document","getElementById","initializeApp","messagingSenderId","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.db19f602.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const CryptoPrice = ({currency, price}) =>\n\t<div className={`column ${currency}--section`}>\n\t\t<h5>${price}</h5>\n\t\t<p>1 {currency.toUpperCase()}</p>\n\t</div>;\n\nCryptoPrice.propTypes = {\n\tprice: PropTypes.number.isRequired,\n\tcurrency: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\r\nimport './Today.css'\r\nimport axios from 'axios'\r\nimport { CryptoPrice } from \"./CryptoPrice\";\r\n\r\nclass Today extends Component {\r\n\t/**\r\n\t * If you're not using the props to initialize your state, you can\r\n\t * just define the state like this and remove the constructor\r\n\t */\r\n\tstate = {\r\n\t\tbtcprice: 0, // I guess you can keep it an empty string, I just think its better to give it a default value of 0 since they're numbers\r\n\t\tltcprice: 0,\r\n\t\tethprice: 0\r\n\t};\r\n\r\n  sendPricePusher(prices) {\r\n    axios\r\n      .post(\"https://node-pwa-app.firebaseapp.com/prices/new\", {\r\n        prices: prices,\r\n        token: this.state.token\r\n      })\r\n      .then(() => {\r\n        this.setState({\r\n          btcprice: prices.BTC.USD,\r\n          ethprice: prices.ETH.USD,\r\n          ltcprice: prices.LTC.USD\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n\t/**\r\n\t * ComponentWillMount is deprecated and should never be used\r\n\t * The only exception is:\r\n\t * When doing Server Side Rendering, this is the only lifecycle method called\r\n\t *\r\n\t * Source: https://facebook.github.io/react/docs/react-component.html\r\n\t */\r\n\tcomponentWillMount() { }\r\n\r\n\t/**\r\n\t * Let's create utilitary functions to keep our code D.R.Y.\r\n\t * Btw, in our use case it's perfectly fine to save the entire state here\r\n\t */\r\n\tsaveStateToLocalStorage = () => {\r\n\t\tlocalStorage.setItem('today-state', JSON.stringify(this.state));\r\n\t};\r\n\r\n\trestoreStateFromLocalStorage = () => {\r\n\t\tconst state = JSON.parse(localStorage.getItem('today-state'));\r\n\t\tthis.setState(state);\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (!navigator.onLine) {\r\n\t\t\treturn this.restoreStateFromLocalStorage();\r\n\t\t}\r\n\r\n\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n\t\t\t.then(({ data: { BTC, ETH, LTC } }) => { // Since we're never using responseh or data directly might aswell deconstruct it here\r\n\t\t\t\t/**\r\n\t\t\t\t * Avoid calling setStates multiple times, just do every calls in one go and let react\r\n\t\t\t\t * handle the batching\r\n\t\t\t\t */\r\n\t\t\t\t console.log(BTC);\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tbtcprice: BTC.USD,\r\n\t\t\t\t\tethprice: ETH.USD,\r\n\t\t\t\t\tltcprice: LTC.USD\r\n\t\t\t\t}, this.saveStateToLocalStorage); // You can pass a callback function to setState\r\n\r\n\t\t\t})\r\n\t\t\t.catch(console.error);\r\n\t\t// Let's store this interval in our class so that we can remove it in componentWillUnmount\r\n\t\tthis.cryptoSubscription = setInterval(() => {\r\n\t\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n\t\t\t\t.then(({ data }) => { // This is a style question, I prefed doing it this way, to each its own\r\n\t\t\t\t\tthis.sendPricePusher(data)\r\n\t\t\t\t})\r\n\t\t\t\t.catch(console.error)\r\n\t\t}, 10000);\r\n\t\t// this.prices.bind('prices', ({ prices: { BTC, ETH, LTC } }) => {\r\n\t\t// \tthis.setState({\r\n\t\t// \t\tbtcprice: BTC.USD,\r\n\t\t// \t\tethprice: ETH.USD,\r\n\t\t// \t\tltcprice: LTC.USD\r\n\t\t// \t}, this.saveStateToLocalStorage);\r\n\t\t// }, this);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.cryptoSubscription);\r\n\t}\r\n\r\n\trender() {\r\n\t\t// Let's extract everything uptop to keep our render method cleaner ;)\r\n\t\tconst { ethprice, btcprice, ltcprice } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className=\"today--section container\">\r\n\t\t\t\t<h2>Current Price</h2>\r\n\t\t\t\t<div className=\"columns today--section__box\">\r\n\t\t\t\t\t{/** Creating components for things that repeat themselves is also pretty good**/}\r\n\t\t\t\t\t<CryptoPrice currency=\"btc\" price={btcprice} />\r\n\t\t\t\t\t<CryptoPrice currency=\"eth\" price={ethprice} />\r\n\t\t\t\t\t<CryptoPrice currency=\"ltc\" price={ltcprice} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Today;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SectionBox = ({price}) =>\n\t<div className=\"history--section__box__inner\">\n\t\t<h4>{price.date}</h4>\n\t\t<div className=\"columns\">\n\t\t\t<div className=\"column\">\n\t\t\t\t<p>1 BTC = ${price.btc}</p>\n\t\t\t</div>\n\t\t\t<div className=\"column\">\n\t\t\t\t<p>1 ETH = ${price.eth}</p>\n\t\t\t</div>\n\t\t\t<div className=\"column\">\n\t\t\t\t<p>1 LTC = ${price.ltc}</p>\n\t\t\t</div>\n\t\t</div>\n\t</div>;\n\nSectionBox.propTypes = {\n\tprice: PropTypes.object.isRequired\n};\n\nSectionBox.defaultProps = {\n\tprice: {\n\t\tdate: '',\n\t\tbtc: 0,\n\t\teth: 0,\n\t\tltc: 0\n\t}\n};\n","import React, { Component } from 'react';\r\nimport './History.css'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport {SectionBox} from \"./SectionBox\";\r\n\r\nclass History extends Component {\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            todayprice: {},\r\n            yesterdayprice: {},\r\n            twodaysprice: {},\r\n            threedaysprice: {},\r\n            fourdaysprice: {}\r\n        };\r\n        /** Let's use arrow functions instead of using bind\r\n        this.getBTCPrices = this.getBTCPrices.bind(this);\r\n        this.getETHPrices = this.getETHPrices.bind(this);\r\n        this.getLTCPrices = this.getLTCPrices.bind(this);\r\n         **/\r\n    }\r\n\r\n\t/**\r\n     * Let's create utilitary functions to keep our code D.R.Y.\r\n\t */\r\n\r\n\tsaveStateToLocalStorage = () => {\r\n\t\tlocalStorage.setItem('history-state', JSON.stringify(this.state));\r\n\t};\r\n\r\n\trestoreStateFromLocalStorage = () => {\r\n\t\tconst state = JSON.parse(localStorage.getItem('today-state'));\r\n\t\tconsole.log(state);\r\n\t\tthis.setState(state);\r\n\t};\r\n\r\n\tgetPriceForDay = (daysCount = 0, key) => {\r\n\t\tconst time = moment().subtract(daysCount, 'days').unix();\r\n\t\taxios.all([this.getETHPrices(time), this.getBTCPrices(time), this.getLTCPrices(time)])\r\n\t\t\t.then(axios.spread((eth, btc, ltc) => {\r\n\t\t\t    /** Have clear names for your variables, what is f supposed to be? **/\r\n\t\t\t\tlet f = {\r\n\t\t\t\t\tdate: moment.unix(time).format(\"MMMM Do YYYY\"),\r\n\t\t\t\t\teth: eth.data.ETH.USD,\r\n\t\t\t\t\tbtc: btc.data.BTC.USD,\r\n\t\t\t\t\tltc: ltc.data.LTC.USD\r\n\t\t\t\t};\r\n\t\t\t\tthis.setState({\r\n                    [key]: f\r\n                }, this.saveStateToLocalStorage);\r\n\t\t\t}));\r\n\t};\r\n\r\n\tgetCurrencyPrice = (date, currency) =>\r\n        axios.get(`https://min-api.cryptocompare.com/data/pricehistorical?fsym=${currency}&tsyms=USD&ts=${date}`);\r\n\r\n\tgetETHPrices = (date) => this.getCurrencyPrice(date, 'ETH');\r\n    getBTCPrices = (date) => this.getCurrencyPrice(date, 'BTC');\r\n    getLTCPrices = (date) => this.getCurrencyPrice(date, 'LTC');\r\n\r\n    /**\r\n     * Now we can define all those functions like this ! :-)\r\n     * Or ... we can do it programmaticaly like below\r\n    getTodayPrice = () => this.getPriceForDay(0, 'todayprice');\r\n    getYesterdayPrice = () => this.getPriceForDay(1, 'yesterdayprice');\r\n    getTwoDaysPrice = () => this.getPriceForDay(2, 'twodaysprice');\r\n    getThreeDaysPrice = () => this.getPriceForDay(3, 'threedaysprice');\r\n    getFourDaysPrice = () => this.getFourDaysPrice(4, 'fourdaysprice');**/\r\n\r\n    componentDidMount () {\r\n\t\tif (!navigator.onLine) {\r\n\t\t    this.restoreStateFromLocalStorage();\r\n\t\t}\r\n        const days = ['today', 'yesterday', 'twodays', 'threedays', 'fourdays'];\r\n        for(const day in days){\r\n            this.getPriceForDay(day, `${days[day]}price`);\r\n        }\r\n        /** We can simplify it but.. Thats just a style thing aswell\r\n        this.getTodayPrice();\r\n        this.getYesterdayPrice();\r\n        this.getTwoDaysPrice();\r\n        this.getThreeDaysPrice();\r\n        this.getFourDaysPrice();**/\r\n    }\r\n    render() {\r\n\t\t/**\r\n\t\t * By creating components and extracting the variable at the top here, we created a much cleaner\r\n\t\t * version of it ! :-)\r\n\t\t */\r\n\t\tconst {todayprice, yesterdayprice, twodaysprice, threedaysprice, fourdaysprice} = this.state;\r\n\t\tconsole.log(this.state);\r\n    \treturn (\r\n            <div className=\"history--section container\">\r\n                <h2>History (Past 5 days)</h2>\r\n                <div className=\"history--section__box\">\r\n\t\t\t\t\t<SectionBox price={todayprice}/>\r\n\t\t\t\t\t<SectionBox price={yesterdayprice}/>\r\n\t\t\t\t\t<SectionBox price={twodaysprice}/>\r\n\t\t\t\t\t<SectionBox price={threedaysprice}/>\r\n\t\t\t\t\t<SectionBox price={fourdaysprice}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default History;\r\n","import firebase from \"firebase\";\r\nexport const initializeFirebase = () => {\r\n  firebase.initializeApp({\r\n    messagingSenderId: \"848447013519\"\r\n  });\r\n};\r\n\r\nexport const askForPermissionToReceiveNotifications = async () => {\r\n  try {\r\n    const messaging = firebase.messaging();\r\n    await messaging.requestPermission();\r\n    const token = await messaging.getToken();\r\n    console.log(\"Token:\", token);\r\n\r\n    return token;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","// Import React and Component\nimport React, { Component } from \"react\";\n// Import CSS from App.css\nimport \"./App.css\";\nimport Today from './Today/Today'\nimport History from './History/History'\nimport { askForPermissionToReceiveNotifications } from \"./notifications/firebase\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null\n    };\n  }\n\n  getToken = () => {\n    askForPermissionToReceiveNotifications().then(resp => {\n      this.setState({ token: resp });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"main-container\">\n        <div className=\"topheader\">\n          <header className=\"container\">\n            <nav className=\"navbar\">\n              <div className=\"navbar-brand\">\n                <span className=\"navbar-item\">\n                  Blockchain Currency Latest Prices\n                </span>\n              </div>\n              <div className=\"navbar-end\">\n                <nav className=\"navbar-item\" onClick={this.getToken}>\n                  Want to receive Push Notifications ?\n                </nav>\n              </div>\n            </nav>\n          </header>\n        </div>\n        <section className=\"results--section\">\n          <div className=\"container\">\n            <h1>\n              Get to know about the latest block chain currency prices\n              <br /> BTC, ETH and LTC\n            </h1>\n          </div>\n          <div className=\"results--section__inner\">\n                <Today />\n                <History />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from './serviceWorker';\nimport { initializeFirebase } from \"./notifications/firebase.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\ninitializeFirebase();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregisterServiceWorker();\n"],"sourceRoot":""}